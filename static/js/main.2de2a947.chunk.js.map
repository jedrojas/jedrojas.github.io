{"version":3,"sources":["components/NavigationBar.jsx","components/HomePage.jsx","components/AboutPage.jsx","components/ContactPage.jsx","App.js","serviceWorker.js","index.js"],"names":["NavigationBar","openDropDown","console","log","document","getElementById","classList","toggle","react_default","a","createElement","className","id","onClick","this","props","onHomeClick","onAboutClick","onContactClick","Component","HomePage","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","Fragment","AboutPage","ContactPage","href","App","handleHomeClick","_this","refs","homeRef","scrollIntoView","behavior","handleAboutClick","aboutRef","handleContactClick","contactRef","components_NavigationBar","ref","components_HomePage","components_AboutPage","components_ContactPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2de2a947.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./style.css\";\n\nfunction myFunction() {\n  var x = document.getElementById(\"navbar-container\");\n  if (x.className === \"navbar-container\") {\n    x.className += \" responsive\";\n  } else {\n    x.className = \"navbar-container\";\n  }\n}\n\nclass NavigationBar extends Component {\n  openDropDown = () => {\n    console.log(\"dropdown\");\n    document.getElementById(\"myDropdown\").classList.toggle(\"show\");\n  };\n  render() {\n    return (\n      <div className=\"navbar-container\" id=\"navbar-container\">\n        <p onClick={this.props.onHomeClick}>Home</p>\n        <p onClick={this.props.onAboutClick}>About</p>\n        <p onClick={this.props.onContactClick}>Contact</p>\n\n        <div className=\"dropdown icon\">\n          <div onClick={this.openDropDown} className=\"dropbtn\">\n            <i className=\"fa fa-bars\" />\n          </div>\n          <div className=\"dropdown-content\" id=\"myDropdown\">\n            <p onClick={this.props.onHomeClick}>Home</p>\n            <p onClick={this.props.onAboutClick}>About</p>\n            <p onClick={this.props.onContactClick}>Contact</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NavigationBar;\n","import React, { Component } from \"react\";\nimport \"./style.css\";\n\nclass HomePage extends Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"text-container\">\n          <div className=\"text\">\n            <div>\n              <img className=\"headshot\" />\n            </div>\n            <br />\n            <p2>Hello there. </p2>\n            <p1>I'm</p1>\n            <p3> Jed Rojas,</p3>\n            <br />\n            <p1>a</p1>\n            <p4> software developer </p4>\n            <p1>from</p1>\n            <p4> Miami, Florida.</p4>\n            <div onClick={this.props.onAboutClick} className=\"about-link\">\n              Learn more about me!\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default HomePage;\n","import React, { Component } from \"react\";\nimport \"./style.css\";\n\nconst AboutPage = () => (\n  <React.Fragment>\n    <div>\n      <div className=\"about-head\">\n        <p>About Me</p>\n      </div>\n      <div className=\"about-body\">\n        <div className=\"col-md-3\" />\n        <div className=\"col-md-6\">\n          <p>\n            My name is Jed Rojas and I study Computer Science at the University\n            of Florida. My primary language is Java, but I have been diving\n            deeper into HTML/CSS/Javascript along with React as I have started\n            working with web development.\n          </p>\n        </div>\n        {/* <div className=\"col-md-4\">\n          <p>\n            Integer pulvinar mauris sit amet accumsan tempus. Ut bibendum velit\n            lectus, maximus posuere tellus pretium elementum.\n          </p>\n        </div> */}\n        {/* <div className=\"col-md-2\" /> */}\n      </div>\n    </div>\n  </React.Fragment>\n);\n\nexport default AboutPage;\n","import React, { Component } from \"react\";\nimport \"./style.css\";\n\nconst ContactPage = () => (\n  <React.Fragment>\n    <div className=\"contact-head\">\n      <p>Contact Me</p>\n    </div>\n    <div className=\"contact-body\">\n      <a href=\"javascript:void(0);\" className=\"fb-icon\" onClick=\"goToFb()\">\n        <i className=\"fa fa-facebook\" />\n      </a>\n      <a href=\"javascript:void(0);\" className=\"li-icon\" onClick=\"goToLi()\">\n        <i className=\"fa fa-linkedin\" />\n      </a>\n      <a href=\"javascript:void(0);\" className=\"ig-icon\" onClick=\"goToIg()\">\n        <i className=\"fa fa-instagram\" />\n      </a>\n      <a href=\"javascript:void(0);\" className=\"gh-icon\" onClick=\"goToGh()\">\n        <i className=\"fa fa-github\" />\n      </a>\n    </div>\n  </React.Fragment>\n);\n\nexport default ContactPage;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport NavigationBar from \"./components/NavigationBar.jsx\";\nimport HomePage from \"./components/HomePage.jsx\";\nimport AboutPage from \"./components/AboutPage.jsx\";\nimport ContactPage from \"./components/ContactPage.jsx\";\n\nclass App extends Component {\n  handleHomeClick = () => {\n    console.log(\"click happened\");\n    this.refs.homeRef.scrollIntoView({ behavior: \"smooth\" });\n  };\n  handleAboutClick = () => {\n    this.refs.aboutRef.scrollIntoView({ behavior: \"smooth\" });\n  };\n  handleContactClick = () => {\n    this.refs.contactRef.scrollIntoView({ behavior: \"smooth\" });\n  };\n  render() {\n    return (\n      <main>\n        <NavigationBar\n          // className=\"navbar\"\n          onHomeClick={this.handleHomeClick}\n          onAboutClick={this.handleAboutClick}\n          onContactClick={this.handleContactClick}\n        />\n        <section className=\"home\" id=\"home\" ref=\"homeRef\">\n          <HomePage onAboutClick={this.handleAboutClick} />\n        </section>\n        <section className=\"about\" id=\"about\" ref=\"aboutRef\">\n          <AboutPage />\n        </section>\n        <section className=\"contact\" id=\"contact\" ref=\"contactRef\">\n          <ContactPage />\n        </section>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}